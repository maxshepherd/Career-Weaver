
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
 


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? // Field to store email verification timestamp
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  // Application-specific relations
  experiences      Experience[]
  projects         Project[]
  userSkills       UserSkill[]
  educations       Education[]
  jobTargets       JobTarget[]
  generatedResumes GeneratedResume[]
  portfolioSetting PortfolioSetting?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application-specific models
model Experience {
  id                 String    @id @default(cuid())
  userId             String
  jobTitle           String
  companyName        String
  startDate          DateTime?
  endDate            DateTime?
  description        String    @db.Text
  location           String?
  includeInPortfolio Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Project {
  id                 String    @id @default(cuid())
  userId             String
  projectName        String
  description        String    @db.Text
  technologiesUsed   String[]
  role               String?
  outcomeImpact      String?   @db.Text
  link               String?
  includeInPortfolio Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Skill {
  id                 String      @id @default(cuid())
  name               String      @unique
  category           String?
  includeInPortfolio Boolean     @default(true) // To control visibility in generated portfolios
  userSkills         UserSkill[]
}

model UserSkill {
  id                 String    @id @default(cuid())
  userId             String
  skillId            String
  proficiencyLevel   String? // e.g., "Beginner", "Intermediate", "Advanced"
  includeInPortfolio Boolean   @default(true) // To control visibility in generated portfolios
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([userId, skillId])
}

model Education {
  id                 String    @id @default(cuid())
  userId             String
  institutionName    String
  degree             String?
  fieldOfStudy       String?
  startDate          DateTime?
  graduationDate     DateTime?
  description        String?   @db.Text
  includeInPortfolio Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model JobTarget {
  id                       String    @id @default(cuid())
  userId                   String
  targetTitle              String
  jobDescriptionOrKeywords String    @db.Text
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt
  user                     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  generatedResumes         GeneratedResume[] // Link back to resumes generated for this target
}

model GeneratedResume {
  id                    String    @id @default(cuid())
  userId                String
  jobTargetId           String?   // Optional link to a specific JobTarget
  selectedExperienceIds String[]
  selectedProjectIds    String[]
  selectedSkillIds      String[]  // Could store UserSkill IDs or Skill IDs
  generatedSummary      String    @db.Text
  templateUsed          String    // For MVP, this will be a single, fixed template name
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobTarget JobTarget? @relation(fields: [jobTargetId], references: [id], onDelete: SetNull) // SetNull if target is deleted
}

// Defer to Phase 3 or later
model PortfolioSetting {
  id              String   @id @default(cuid())
  userId          String   @unique // Each user has one portfolio setting
  theme           String?
  layout          String?
  customDomain    String?
  publiclyVisible Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
